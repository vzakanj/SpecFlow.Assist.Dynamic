// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Create dynamic set from SpecFlow table using value converters")]
    public partial class CreateDynamicSetFromSpecFlowTableUsingValueConvertersFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DynamicSetFromTableUsingValueConverters.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Create dynamic set from SpecFlow table using value converters", "In order to write only code that matters\r\nAs a SpecFlow developer\r\nI want SpecFlo" +
                    "w to create set of dynamic objects from a table row using value converters", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create set of dynamic objects using ValueToString converter")]
        public virtual void CreateSetOfDynamicObjectsUsingValueToStringConverter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create set of dynamic objects using ValueToString converter", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Age",
                        "Birth date",
                        "Length in meters"});
            table1.AddRow(new string[] {
                        "Marcus",
                        "39",
                        "1972-10-09",
                        "1.96"});
            table1.AddRow(new string[] {
                        "Albert",
                        "3",
                        "2008-01-24",
                        "1.03"});
            table1.AddRow(new string[] {
                        "Gustav",
                        "1",
                        "2010-03-19",
                        "0.84"});
            table1.AddRow(new string[] {
                        "Arvid",
                        "1",
                        "2010-03-19",
                        "0.85"});
#line 7
 testRunner.When("I create a set of dynamic instances using only ValueToString converter from this " +
                    "table", ((string)(null)), table1, "When ");
#line 13
 testRunner.Then("I should have a list of 4 dynamic objects", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 14
  testRunner.And("the 1 item should have property Name of type string equal to Marcus", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
  testRunner.And("the 2 item should have property Age of type string equal to 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
  testRunner.And("the 3 item should have property BirthDate of type string equal to 2010-03-19", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
  testRunner.And("the 4 item should have property LengthInMeters of type string equal to 0.85", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create set of dynamic objects using ValueToDouble converter")]
        public virtual void CreateSetOfDynamicObjectsUsingValueToDoubleConverter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create set of dynamic objects using ValueToDouble converter", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Age",
                        "Birth date",
                        "Length in meters"});
            table2.AddRow(new string[] {
                        "Marcus",
                        "39",
                        "1972-10-09",
                        "1.96"});
            table2.AddRow(new string[] {
                        "Albert",
                        "3",
                        "2008-01-24",
                        "1.03"});
            table2.AddRow(new string[] {
                        "Gustav",
                        "1",
                        "2010-03-19",
                        "0.84"});
            table2.AddRow(new string[] {
                        "Arvid",
                        "1",
                        "2010-03-19",
                        "0.85"});
#line 20
 testRunner.When("I create a set of dynamic instances using only ValueToDouble converter from this " +
                    "table", ((string)(null)), table2, "When ");
#line 26
 testRunner.Then("I should have a list of 4 dynamic objects", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 27
  testRunner.And("the 1 item should have property Name of type string equal to Marcus", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
  testRunner.And("the 2 item should have property Age of type double equal to 3.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
  testRunner.And("the 3 item should have property BirthDate of type DateTime equal to 2010-03-19", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
  testRunner.And("the 4 item should have property LengthInMeters of type double equal to 0.85", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create set of dynamic objects using ValueToDecimal converter")]
        public virtual void CreateSetOfDynamicObjectsUsingValueToDecimalConverter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create set of dynamic objects using ValueToDecimal converter", ((string[])(null)));
#line 32
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Age",
                        "Birth date",
                        "Length in meters"});
            table3.AddRow(new string[] {
                        "Marcus",
                        "39",
                        "1972-10-09",
                        "1.96"});
            table3.AddRow(new string[] {
                        "Albert",
                        "3",
                        "2008-01-24",
                        "1.03"});
            table3.AddRow(new string[] {
                        "Gustav",
                        "1",
                        "2010-03-19",
                        "0.84"});
            table3.AddRow(new string[] {
                        "Arvid",
                        "1",
                        "2010-03-19",
                        "0.85"});
#line 33
 testRunner.When("I create a set of dynamic instances using only ValueToDecimal converter from this" +
                    " table", ((string)(null)), table3, "When ");
#line 39
 testRunner.Then("I should have a list of 4 dynamic objects", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 40
  testRunner.And("the 1 item should have property Name of type string equal to Marcus", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
  testRunner.And("the 2 item should have property Age of type decimal equal to 3.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
  testRunner.And("the 3 item should have property BirthDate of type DateTime equal to 2010-03-19", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
  testRunner.And("the 4 item should have property LengthInMeters of type decimal equal to 0.85", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create set of dynamic objects using ValueToInt converter")]
        public virtual void CreateSetOfDynamicObjectsUsingValueToIntConverter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create set of dynamic objects using ValueToInt converter", ((string[])(null)));
#line 45
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Age",
                        "Birth date",
                        "Length in meters"});
            table4.AddRow(new string[] {
                        "Marcus",
                        "39",
                        "1972-10-09",
                        "1.96"});
            table4.AddRow(new string[] {
                        "Albert",
                        "3",
                        "2008-01-24",
                        "1.03"});
            table4.AddRow(new string[] {
                        "Gustav",
                        "1",
                        "2010-03-19",
                        "0.84"});
            table4.AddRow(new string[] {
                        "Arvid",
                        "1",
                        "2010-03-19",
                        "0.85"});
#line 46
 testRunner.When("I create a set of dynamic instances using only ValueToInt converter from this tab" +
                    "le", ((string)(null)), table4, "When ");
#line 52
 testRunner.Then("I should have a list of 4 dynamic objects", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 53
  testRunner.And("the 1 item should have property Name of type string equal to Marcus", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
  testRunner.And("the 2 item should have property Age of type int equal to 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 55
  testRunner.And("the 3 item should have property BirthDate of type DateTime equal to 2010-03-19", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
  testRunner.And("the 4 item should have property LengthInMeters of type double equal to 0.85", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create set of dynamic objects using ValueToDateTime converter")]
        public virtual void CreateSetOfDynamicObjectsUsingValueToDateTimeConverter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create set of dynamic objects using ValueToDateTime converter", ((string[])(null)));
#line 58
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Age",
                        "Birth date",
                        "Length in meters"});
            table5.AddRow(new string[] {
                        "Marcus",
                        "39",
                        "1972-10-09",
                        "1.96"});
            table5.AddRow(new string[] {
                        "Albert",
                        "3",
                        "2008-01-24",
                        "1.03"});
            table5.AddRow(new string[] {
                        "Gustav",
                        "1",
                        "2010-03-19",
                        "0.84"});
            table5.AddRow(new string[] {
                        "Arvid",
                        "1",
                        "2010-03-19",
                        "0.85"});
#line 59
 testRunner.When("I create a set of dynamic instances using only ValueToDateTime converter from thi" +
                    "s table", ((string)(null)), table5, "When ");
#line 65
 testRunner.Then("I should have a list of 4 dynamic objects", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 66
  testRunner.And("the 1 item should have property Name of type string equal to Marcus", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
  testRunner.And("the 2 item should have property Age of type double equal to 3.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
  testRunner.And("the 3 item should have property BirthDate of type DateTime equal to 2010-03-19", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
  testRunner.And("the 4 item should have property LengthInMeters of type double equal to 0.85", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create set of dynamic objects using ValueToDateTime converter with date format dd" +
            "/MM/yyyy")]
        public virtual void CreateSetOfDynamicObjectsUsingValueToDateTimeConverterWithDateFormatDdMMYyyy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create set of dynamic objects using ValueToDateTime converter with date format dd" +
                    "/MM/yyyy", ((string[])(null)));
#line 71
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Age",
                        "Birth date",
                        "Length in meters"});
            table6.AddRow(new string[] {
                        "Marcus",
                        "39",
                        "09/10/1972",
                        "1.96"});
            table6.AddRow(new string[] {
                        "Albert",
                        "3",
                        "24/01/2008",
                        "1.03"});
            table6.AddRow(new string[] {
                        "Gustav",
                        "1",
                        "19/03/2010",
                        "0.84"});
            table6.AddRow(new string[] {
                        "Arvid",
                        "1",
                        "19/03/2010",
                        "0.85"});
#line 72
 testRunner.When("I create a set of dynamic instances using only ValueToDateTime converter with dat" +
                    "e format dd/MM/yyyy from this table", ((string)(null)), table6, "When ");
#line 78
 testRunner.Then("I should have a list of 4 dynamic objects", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 79
  testRunner.And("the 1 item should have property Name of type string equal to Marcus", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 80
  testRunner.And("the 2 item should have property Age of type double equal to 3.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 81
  testRunner.And("the 3 item should have property BirthDate of type DateTime equal to 2010-03-19", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 82
  testRunner.And("the 4 item should have property LengthInMeters of type double equal to 0.85", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create set of dynamic objects using ValueToDecimal and ValueToString converters")]
        public virtual void CreateSetOfDynamicObjectsUsingValueToDecimalAndValueToStringConverters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create set of dynamic objects using ValueToDecimal and ValueToString converters", ((string[])(null)));
#line 84
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Age",
                        "Birth date",
                        "Length in meters"});
            table7.AddRow(new string[] {
                        "Marcus",
                        "39",
                        "1972-10-09",
                        "1.96"});
            table7.AddRow(new string[] {
                        "Albert",
                        "3",
                        "2008-01-24",
                        "1.03"});
            table7.AddRow(new string[] {
                        "Gustav",
                        "1",
                        "2010-03-19",
                        "0.84"});
            table7.AddRow(new string[] {
                        "Arvid",
                        "1",
                        "2010-03-19",
                        "0.85"});
#line 85
 testRunner.When("I create a set of dynamic instances using converters ValueToDecimal, ValueToStrin" +
                    "g from this table", ((string)(null)), table7, "When ");
#line 91
 testRunner.Then("I should have a list of 4 dynamic objects", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 92
  testRunner.And("the 1 item should have property Name of type string equal to Marcus", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 93
  testRunner.And("the 2 item should have property Age of type decimal equal to 3.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
  testRunner.And("the 3 item should have property BirthDate of type string equal to 2010-03-19", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 95
  testRunner.And("the 4 item should have property LengthInMeters of type decimal equal to 0.85", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
